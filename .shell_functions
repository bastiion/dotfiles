#!/bin/zsh

# DESCRIPTION:
#   * h highlights with color specified keywords when you invoke it via pipe
#   * h is just a tiny wrapper around the powerful 'ack' (or 'ack-grep'). you need 'ack' installed to use h. ack website: http://beyondgrep.com/
# INSTALL:
#   * put something like this in your .bashrc:
#     . /path/to/h.sh
#   * or just copy and paste the function in your .bashrc
# TEST ME:
#   * try to invoke:
#     echo "abcdefghijklmnopqrstuvxywz" | h   a b c d e f g h i j k l
# GITHUB
#   * https://github.com/paoloantinori/hhighlighter

h() {

	_usage() { 
		echo "usage: YOUR_COMMAND | h [-idn] args...
	-i : ignore case
	-d : disable regexp
	-n : invert colors"
	}

	local _OPTS

	# detect pipe or tty
	if test -t 0; then 
		_usage
		return
	fi

	# manage flags
	while getopts ":idnQ" opt; do
	    case $opt in 
	       i) _OPTS+=" -i " ;;
		   d)  _OPTS+=" -Q " ;;
	       n) n_flag=true ;;
	       Q)  _OPTS+=" -Q " ;;
	           # let's keep hidden compatibility with -Q for original ack users
	       \?) _usage
				return ;;
	    esac
	done
	
	shift $(($OPTIND - 1))

	# check maximum allowed input
	if (( ${#@} > 12)); then
		echo "Too many terms. h supports a maximum of 12 groups. Consider relying on regular expression supported patterns like \"word1\\|word2\""
		return -1
	fi;

	# set zsh compatibility
	[[ -n $ZSH_VERSION ]] && setopt localoptions && setopt ksharrays && setopt ignorebraces

	local _i=0

	if [ -z $n_flag ]; then
		#inverted-colors-last scheme
		_COLORS=( "underline bold red" "underline bold green" "underline bold yellow"  "underline bold blue"  "underline bold magenta"  "underline bold cyan" "bold on_red" "bold on_green" "bold black on_yellow" "bold on_blue"  "bold on_cyan" "bold on_magenta"  )
	else
		#inverted-colors-first scheme
		_COLORS=( "bold on_red" "bold on_green" "bold black on_yellow" "bold on_blue" "bold on_magenta" "bold on_cyan" "bold black on_white"  "underline bold red" "underline bold green" "underline bold yellow"  "underline bold blue"  "underline bold magenta" 	)
    fi

	# build the filtering command
	for keyword in "$@"
	do
		local _COMMAND=$_COMMAND"ack-grep $_OPTS --noenv --flush --passthru --color --color-match=\"${_COLORS[$_i]}\" '$keyword' |"
	    _i=$_i+1
	done
	#trim ending pipe
	_COMMAND=${_COMMAND%?}
	#echo "$_COMMAND"
	cat - | eval $_COMMAND
}


addAlias() {
    ALIAS_FILE=~/.bash_aliases
	if (( ${#@} < 2)); then
        echo -e "You need to specify the alias name and the substitution \n\t\taddAlias NAME SUBSTITUTION [COMMENT]"
        return
    fi
    GREP_CMD="grep \"^alias ${1}=\" ${ALIAS_FILE}"
    if [ $(eval "${GREP_CMD} -c") -gt 0 ];then
        echo  "already exists exists: "
        eval ${GREP_CMD}
        return
    fi
    echo -e "\n\n#${3}\nalias ${1}=\"${2}\"" >> ${ALIAS_FILE}
    source ${ALIAS_FILE}

}


#
# push a bookmark to .dir_bookmarks and recall it using 'cbd' function
# to get a list of bookmarks call 
# #> cbd ?
# to save a bookmark call, if you leave out FOLDER the currend directory will be used
# #> bd [FOLDER]
#

bd() {
    FILE=~/.dir_bookmarks
    if [ ! -e  ${FILE} ];then
        touch ${FILE}
    fi
    
    DIR=${1}
    if [ -z ${DIR} ];then
        DIR=$(pwd)
    fi
    echo -e "0a\n${DIR}\n.\nw" | ed ${FILE}
}

cbd() {
    FILE=~/.dir_bookmarks

    if [ ! -e  ${FILE} ];then
        return 1
    fi
    
    LINE=${1}
    if [ -z ${LINE} ];then
        LINE="1"
    elif [[ ${LINE} = "?" ]];then
        cat -n ${FILE} | head -n 10
        return
    fi
   
    DIR=$(/bin/sed -n ${LINE}p ${FILE})
    echo $DIR
    cd $DIR
}


rsync_cwd_with_remote() {
    REMOTE="${1}:$(pwd)/."
    rsync -avz --filter "dir-merge,n- .rsync_exclude" ${REMOTE} .
}


rsync_exclude_git() {
    for dir in $(find -type d -name ".git")
    do base=${dir:0:-4}
        find ${base} -maxdepth 1 -printf "%f\n" | grep -v "\.git\|\.rsync_exclude" > ${base}/.rsync_exclude
    done
}


mkcd() {
    if [ -z ${1} ];then
        echo "Please provide a folder name"
        return 1
    fi
    mkdir -p ${1}
    cd ${1}
}

ssh_pubkey_send() {
    if [ -z ${1} ];then
        echo "Please provide a user@host as destination"
        return 1
    fi
    if [ ! -f ~/.ssh/id_rsa.pub ]; then 
        read -q "REPLY?Generate a key pair(y/n)?"
        if [ ${REPLY} = "y" ]; then
            ssh-keygen -t rsa
        else
            return 1
        fi
    fi
    cat ~/.ssh/id_rsa.pub | ssh ${1} "cat - >> ~/.ssh/authorized_keys"
}


function del_hist {

  if [ -z ${1} ];then
    echo "Provide a history search term"
    return 1
  fi
  
  history | tail -n1 
  NUM=`history | grep ${1} | tail -n1 |  sed 's/ \([0-9]\{4\}\).*/\1/'`
  
  if [ -z ${1} ];then
    echo "No hits!"
    return 1
  fi
  
  echo "Deleting ${NUM}"
  
  while [[ ${NUM} -gt 0 ]];do
    echo "Deleting ${NUM}"
    history -d ${NUM}
    NUM=`history | grep ${1} | tail -n1 |  sed 's/ \([0-9]\{4\}\).*/\1/'`
  done
}


function export_blazegraph {
    NAMESPACE=${1}
    HOST=${2:-localhost}
    curl -X POST http://${HOST}:9999/blazegraph/namespace/${NAMESPACE}/sparql --data-urlencode \
'query=CONSTRUCT  WHERE { hint:Query hint:analytic "true" . hint:Query hint:constructDistinctSPO "false" . ?s ?p ?o }' -H 'Accept:application/sparql-results+json' > knowledgebase-export-`date -I`.json
}

function symlink_local_components {
    for dir in  $(find ../.. -mindepth 1 -maxdepth 1 -type d );do 
        base=$(basename "${dir}")
        if [[ -d "./${base}" ]];then 
            rm -r "./${base}"
            ln -s "${dir}" .
        fi
    done
}
